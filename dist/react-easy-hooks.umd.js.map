{"version":3,"file":"react-easy-hooks.umd.js","sources":["../src/hooks/use-input.js","../src/hooks/use-on-mount.js","../src/hooks/use-on-unmount.js","../src/hooks/use-prev.js","../src/hooks/use-toggle.js"],"sourcesContent":["import { useState } from 'react'\n\n/**\n * Hook for input values\n * @param {Any} initial Initial input value\n * @param {Function} validation Validation function\n *\n * @example\n * import { useInput } from 'react-easy-hooks'\n *\n * const Component = () => {\n *     const name = useInput('Tiaan', (val) => val.length > 3)\n *     return <div>\n *          {!name.valid && 'Invalid'}\n *          <input {...name}/>\n *      </div>\n * }\n */\nexport default function useInput (initial = '', validation = () => true) {\n  const [value, setVal] = useState(initial)\n  const onChange = e => setVal(e.target.value)\n\n  return {\n    value,\n    valid: validation(value),\n    onChange\n  }\n}\n","import { useEffect } from 'react'\n\n/**\n * Hook to call on component unmount\n * @param {Function} func Function to call\n *\n * @example\n * import { useOnMount } from 'react-easy-hooks'\n *\n * const Component = () => {\n *      useOnMount(() => { console.log('Mounted!') })\n *      return <h1>Hi</h1>\n * }\n */\nexport default function useOnMount (func) {\n  useEffect(() => {\n    func && func()\n  }, [])\n}\n","import { useEffect } from 'react'\n\n/**\n * Hook to call on component unmount\n * @param {Function} func Function to call\n *\n * @example\n * import { useOnUnmount } from 'react-easy-hooks'\n *\n * const Component = () => {\n *      useOnUnmount(() => { console.log('Unmounted!') })\n *      return <h1>Hi</h1>\n * }\n */\nexport default function useOnUnmount (func) {\n  useEffect(() => func && func(), [])\n}\n","import { useEffect, useRef } from 'react'\n\n/**\n * Hook to get previous value of a prop or a state value.\n * Straight out of [React docs](https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state)\n * @param {Any} value\n */\nexport default function usePrev (value) {\n  const ref = useRef()\n\n  useEffect(() => {\n    ref.current = value\n  })\n\n  return ref.current\n}\n","import { useState } from 'react'\n\n/**\n *\n * @param {Boolean} initial Initial value of toggle\n *\n * @example\n * import { useToggle } from 'react-easy-hooks'\n *\n * const Component = () => {\n *    const name = useToggle()\n *\n *    return <div>\n *          <button onClick={name.toggle}>Toggle</button>\n *          {name.isOn && 'Tiaan'}\n *      </div>\n * }\n */\nexport default function useToggle (initial = false) {\n  const [isOn, setToggle] = useState(initial)\n  return {\n    isOn,\n    reset: () => setToggle(initial),\n    toggle: () => setToggle(prev => !prev)\n  }\n}\n"],"names":["initial","validation","useState","value","valid","e","setVal","target","func","useEffect","const","ref","useRef","current","reset","setToggle","toggle","prev"],"mappings":"kOAkBe,SAAmBA,EAAcC,kBAAJ,qCAAuB,IACjE,MAAwBC,WAASF,iBAGjC,MAAO,OACLG,EACAC,MAAOH,EAAWE,qBAJHE,UAAKC,EAAOD,EAAEE,OAAOJ,oBCNzB,SAAqBK,GAClCC,uBACED,GAAQA,KACP,oBCHU,SAAuBA,GACpCC,8BAAgBD,GAAQA,KAAQ,eCRnB,SAAkBL,GAC/BO,IAAMC,EAAMC,WAMZ,OAJAH,uBACEE,EAAIE,QAAUV,IAGTQ,EAAIE,qBCIE,SAAoBb,mBAAU,GAC3C,MAA0BE,WAASF,UACnC,MAAO,WAELc,wBAAaC,EAAUf,IACvBgB,yBAAcD,WAAUE,UAASA"}